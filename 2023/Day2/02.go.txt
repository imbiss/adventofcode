package main

import (
	"fmt"
	"io/ioutil"
	"log"
	"strconv"
	"strings"
)

func main() {
	content, err := readFromFile()

	if err != nil {
		log.Fatal(err)
	} else {
		processLines(content)
	}
}

func readFromFile() (string, error) {
	content, err := ioutil.ReadFile("input.txt")
	if err != nil {
		fmt.Printf("Error reading file: %v\n", err)
		return "", err
	}

	return string(content), nil
}

func processLines(input string) {
	lines := strings.Split(input, "\n")
	totalSum := 0

	for _, line := range lines {

		gameRound, groupResults, err := processLine(line)

		if err != nil {
			fmt.Printf("Error %v\n", err)
			return
		}

		fmt.Printf("%s: ", gameRound)

		if isPossible(groupResults) {
			gameIndex := getLastDigit(gameRound)
			totalSum += gameIndex
		}

		fmt.Println()

	}

	fmt.Printf("Total: %d\n\n", totalSum)
}

func processLine(input string) (string, string, error) {
	parts := strings.Split(input, ":")

	if len(parts) != 2 {
		return "", "", fmt.Errorf("Can not split %s", input)
	}

	return parts[0], parts[1], nil
}

func splitBySemicolon(input string) ([]string, error) {
	parts := strings.Split(input, ";")

	if len(parts) < 1 {
		return nil, fmt.Errorf("can not split by semicolon %s", input)
	}

	return parts, nil
}

func isPossible(input string) bool {

	groups, err := splitBySemicolon(input)

	if err != nil {
		fmt.Printf("Error %v\n", err)
		return false
	}

	if len(groups) < 1 {
		fmt.Printf("no gourp found\n")
		return false
	}

	for _, group := range groups {
		// fmt.Printf("%s \n", group)
		groupResult := checkGroup(group)

		if groupResult == false {
			return false
		}
	}

	return true
}

func checkGroup(input string) bool {
	colors := strings.Split(input, ",")

	for _, color := range colors {

		result := checkEachColor(color)

		if false == result {
			fmt.Printf("skip: %s", color)
			return false
		}
	}

	return true
}

func checkEachColor(color string) bool {
	color = strings.TrimSpace(color)
	parts := strings.Split(color, " ")

	num := parts[0]
	colorName := parts[1]

	count, err := strconv.Atoi(num)

	if err != nil {
		fmt.Println("Conv failed", err)
		return false
	}

	if colorName == "red" && count > 12 {
		return false
	}

	if colorName == "green" && count > 13 {
		return false
	}

	if colorName == "blue" && count > 14 {
		return false
	}

	return true
}

func getLastDigit(input string) int {
	var lastDigit string

	lastDigit = input[5:]

	digit, err := strconv.Atoi(lastDigit)

	if err != nil {
		fmt.Println("can not convert to int!")

		return 0
	}

	fmt.Printf("+ %d\n", digit)

	return digit
}
